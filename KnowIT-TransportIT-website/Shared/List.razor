@inject HttpClient Http

<strong>@Title</strong>

<!--PRE-LOAD MESSAGE-->
@if (fares == null)
{
    <p><em>Loading fares..</em></p>
}


else
{
    <p>Filter fares by fare name, transport type or week day: </p>
    <input type="text" @bind-value="searchTerm" placeholder="Search..." />
    <br />
    <br />

    <h4>List of all fares</h4>
    <ul>
        @foreach (var product in filteredFares)
        {
            <article>
                <p className="list">
                    Fare: @product.TripTitle, fare number: #@product.TicketNumber
                    <br />Transport: @product.Category, week day: @product.WeekDay
                    <br />Price: @(product.Price == 0 ? "Free" : $"{product.Price} SEK")
                </p>
                <hr>
            </article>
        }
    </ul>
}

@code {
    //declare variables and list
    private string searchTerm;
    private List<Fare> fares;

    //task to get JSON data from API and put it in list variable
    protected override async Task OnInitializedAsync()
    {
        fares = await Http.GetFromJsonAsync<List<Fare>>("https://localhost:7297/api/Tickets/");

    }

    //search and filter by the input from user in variable string
    //check if the product exist and filter out those who do not match
    private Fare[] filteredFares =>
    string.IsNullOrWhiteSpace(searchTerm) ?
        fares?.ToArray() ?? new Fare[0] :
        fares?.Where(x =>
            (x.TripTitle != null && x.TripTitle.ToLower().Contains(searchTerm.ToLower())) ||
            (x.Category != null && x.Category.ToLower().Contains(searchTerm.ToLower())) ||
            (x.WeekDay != null && x.WeekDay.ToLower().Contains(searchTerm.ToLower()))
        ).ToArray() ?? new Fare[0];

    //fare object
    private class Fare
    {
        //data fields
        public int Id { get; set; }

        //user input and object properties
        public string? TripTitle { get; set; }
        public int? TicketNumber { get; set; }
        public string? TicketDescription { get; set; }
        public double? Price { get; set; }
        public string? Category { get; set; }
        public string? Expiration_date { get; set; }
        public string? WeekDay { get; set; }
    }

    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }
}
