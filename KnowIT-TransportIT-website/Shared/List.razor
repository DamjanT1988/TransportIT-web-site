@inject HttpClient Http

<strong>@Title</strong>

@if (products == null)
{
    <p><em>Loading products..</em></p>
}

else
{
    <p>Search product by name: </p>
    <input type="text" @bind-value="searchTerm" placeholder="Search..." />
    <br />
    <br />
    <ul>
        @foreach (var product in filteredProducts)
        {
            <article>
                <h3>@product.Product_title <br />Article #@product.Id</h3>

                <strong>Product title:</strong>
                <p className="list">@product.Product_title</p>

                <strong>Article number:</strong>
                <p>@product.Id</p>

                <strong>EAN number:</strong>
                <p>@product.Ean_number</p>

                <strong>Product description:</strong>
                <p>@product.Product_description</p>

                <strong>Selling price:</strong>
                <p>@($"{product.Price:C}")</p>

                <strong>Amount in storage:</strong>
                <p id="storage">@product.Amount_storage</p>

                <strong>Expiration date:</strong>
                <p>@product.Expiration_date</p>

                <strong>Category:</strong>
                @if (product.Category == 1)
                {
                    <p>Domestic</p>
                }
                else if (product.Category == 2)
                {
                    <p>Forgein</p>
                } else {
                    <p>None filled</p>
                }

                <strong>Natíonality:</strong>
                @if (product.IsSwedish == true)
                {
                    <p>Swedish</p>
                }
                else
                {
                    <p>International</p>
                }
                <img src="@($"data:image/png;base64,{Convert.ToBase64String(product.Image_data)}")" />
                <br />
                <hr />
            </article>
        }
    </ul>
}

@code {
    //declare variables and list
    private string searchTerm;
    private List<Product> products;

    //task to get JSON data from API and put it in list variable
    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<Product>>("https://localhost:7090/api/ProductAPI/");
    }

    //search and filter by the input from user in variable string
    //check if the product exist and filter out those who do not match
    private Product[] filteredProducts => string.IsNullOrWhiteSpace(searchTerm) ?
        products?.ToArray() ?? new Product[0] :
        products?.Where(x => x.Product_title.ToLower().Contains(searchTerm.ToLower())).ToArray() ?? new Product[0];


    private class Product
    {
        //data fields
        public int Id { get; set; }

        //user input and object properties
        public string? Product_title { get; set; }
        public string? Ean_number { get; set; }
        public string? Product_description { get; set; }
        public double? Price { get; set; }
        public int? Amount_storage { get; set; }
        public string? Expiration_date { get; set; }
        public int? Category { get; set; }
        public bool? IsSwedish { get; set; }
        public string? Image_path { get; set; }
        public string? Image_file { get; set; }
        //image
        public byte[]? Image_data { get; set; }
    }

    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }
    }
